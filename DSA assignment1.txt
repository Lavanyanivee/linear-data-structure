Linear Data Structure

Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?

function findPairsWithSum(arr, targetSum) {
  const result = [];

  // Nested loop to compare each pair of elements
  for (let i = 0; i < arr.length - 1; i++) {
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[i] + arr[j] === targetSum) {
        result.push([arr[i], arr[j]]);
      }
    }
  }

  return result;
}

// Example usage:
const integerArray = [2, 4, 3, 7, 1, 5, 9];
const targetSum = 8;
const pairs = findPairsWithSum(integerArray, targetSum);

console.log(`Pairs with sum ${targetSum}:`);
pairs.forEach(pair => {
  console.log(pair);
});

Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.

function reverseArrayInPlace(arr) {
  const length = arr.length;
  const middle = Math.floor(length / 2);

  for (let i = 0; i < middle; i++) {
    // Swap elements at i and length - 1 - i
    const temp = arr[i];
    arr[i] = arr[length - 1 - i];
    arr[length - 1 - i] = temp;
  }
}

// Example usage:
const myArray = [1, 2, 3, 4, 5];
console.log("Original array:", myArray);

reverseArrayInPlace(myArray);
console.log("Reversed array:", myArray);

Q3. Write a program to check if two strings are a rotation of each other?

function areRotations(str1, str2) {
  // Check if the lengths of both strings are the same
  if (str1.length !== str2.length) {
    return false;
  }

  // Concatenate str1 with itself
  const concatenatedStr = str1 + str1;

  // Check if str2 is a substring of the concatenated string
  if (concatenatedStr.includes(str2)) {
    return true;
  }

  return false;
}

// Example usage:
const string1 = "hello";
const string2 = "lohel";

if (areRotations(string1, string2)) {
  console.log(`${string1} and ${string2} are rotations of each other.`);
} else {
  console.log(`${string1} and ${string2} are not rotations of each other.`);
}

Q4. Write a program to print the first non-repeated character from a string?

function findFirstNonRepeatedCharacter(str) {
  const charCount = {}; // Object to store character frequencies

  // Count the frequency of each character in the string
  for (const char of str) {
    if (charCount[char]) {
      charCount[char]++;
    } else {
      charCount[char] = 1;
    }
  }

  // Iterate through the string to find the first non-repeated character
  for (const char of str) {
    if (charCount[char] === 1) {
      return char; // Return the first non-repeated character
    }
  }

  // If no non-repeated character is found, return null or a message
  return null; // You can change this to a message if desired
}

// Example usage:
const inputString = "programming";
const firstNonRepeated = findFirstNonRepeatedCharacter(inputString);

if (firstNonRepeated !== null) {
  console.log(`The first non-repeated character is: ${firstNonRepeated}`);
} else {
  console.log("There are no non-repeated characters in the string.");
}

Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.

function towerOfHanoi(n, source, auxiliary, destination) {
  if (n === 1) {
    console.log(`Move disk 1 from ${source} to ${destination}`);
    return;
  }

  // Move n-1 disks from source to auxiliary peg using destination as an auxiliary peg
  towerOfHanoi(n - 1, source, destination, auxiliary);

  // Move the nth disk from source to destination
  console.log(`Move disk ${n} from ${source} to ${destination}`);

  // Move the n-1 disks from auxiliary peg to destination peg using source peg as an auxiliary peg
  towerOfHanoi(n - 1, auxiliary, source, destination);
}

// Example usage:
const numDisks = 3;
const sourcePeg = 'A';
const auxiliaryPeg = 'B';
const destinationPeg = 'C';

console.log(`Tower of Hanoi with ${numDisks} disks:`);
towerOfHanoi(numDisks, sourcePeg, auxiliaryPeg, destinationPeg);

Q6. Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

function isOperator(char) {
  return ['+', '-', '*', '/', '^'].includes(char);
}

function postfixToPrefix(postfixExpression) {
  const stack = [];
  const tokens = postfixExpression.split(' ');

  for (const token of tokens) {
    if (!isOperator(token)) {
      stack.push(token); // Operand, push onto the stack
    } else {
      // Operator, pop top two operands, combine, and push back onto stack
      const operand2 = stack.pop();
      const operand1 = stack.pop();
      const prefixExpression = token + operand1 + operand2;
      stack.push(prefixExpression);
    }
  }

  return stack.pop(); // The final result is the prefix expression
}

// Example usage:
const postfixExpression = '3 4 2 * +';
const prefixExpression = postfixToPrefix(postfixExpression);

console.log(`Postfix Expression: ${postfixExpression}`);
console.log(`Prefix Expression: ${prefixExpression}`);

Q7. Write a program to convert prefix expression to infix expression.

function isOperator(char) {
  return ['+', '-', '*', '/', '^'].includes(char);
}

function prefixToInfix(prefixExpression) {
  const stack = [];
  const tokens = prefixExpression.split(' ').reverse(); // Reverse to process from right to left

  for (const token of tokens) {
    if (!isOperator(token)) {
      stack.push(token); // Operand, push onto the stack
    } else {
      // Operator, pop the top two operands, combine, and push back onto stack
      const operand2 = stack.pop();
      const operand1 = stack.pop();
      const infixExpression = `(${operand1} ${token} ${operand2})`;
      stack.push(infixExpression);
    }
  }

  return stack.pop(); // The final result is the infix expression
}

// Example usage:
const prefixExpression = '+ * 3 4 2';
const infixExpression = prefixToInfix(prefixExpression);

console.log(`Prefix Expression: ${prefixExpression}`);
console.log(`Infix Expression: ${infixExpression}`);

Q8. Write a program to check if all the brackets are closed in a given code snippet.

function areBracketsClosed(codeSnippet) {
  const stack = [];
  const bracketPairs = {
    ')': '(',
    ']': '[',
    '}': '{',
  };

  for (const char of codeSnippet) {
    if (['(', '[', '{'].includes(char)) {
      stack.push(char); // Push opening brackets onto the stack
    } else if ([')', ']', '}'].includes(char)) {
      // Check if the stack is empty or the top of the stack does not match the closing bracket
      if (stack.length === 0 || stack.pop() !== bracketPairs[char]) {
        return false; // Bracket mismatch
      }
    }
  }

  // If the stack is empty, all brackets are closed correctly
  return stack.length === 0;
}

// Example usage:
const codeSnippet1 = 'if (x > 0) { console.log("Positive"); }';
const codeSnippet2 = 'function myFunction() { return [1, 2, 3]; }';

console.log(`Code snippet 1: ${areBracketsClosed(codeSnippet1) ? 'Valid' : 'Invalid'}`);
console.log(`Code snippet 2: ${areBracketsClosed(codeSnippet2) ? 'Valid' : 'Invalid'}`);

Q9. Write a program to reverse a stack.

class Stack {
  constructor() {
    this.items = [];
  }

  push(item) {
    this.items.push(item);
  }

  pop() {
    if (!this.isEmpty()) {
      return this.items.pop();
    }
    return null;
  }

  isEmpty() {
    return this.items.length === 0;
  }

  reverse() {
    const auxiliaryStack = new Stack();

    // Pop elements from the original stack and push them onto the auxiliary stack
    while (!this.isEmpty()) {
      auxiliaryStack.push(this.pop());
    }

    // Pop elements from the auxiliary stack and push them back onto the original stack
    while (!auxiliaryStack.isEmpty()) {
      this.push(auxiliaryStack.pop());
    }
  }
}

// Example usage:
const myStack = new Stack();
myStack.push(1);
myStack.push(2);
myStack.push(3);
myStack.push(4);

console.log("Original Stack:");
console.log(myStack.items);

myStack.reverse();

console.log("Reversed Stack:");
console.log(myStack.items);

Q10. Write a program to find the smallest number using a stack.

class MinStack {
  constructor() {
    this.stack = [];          // Main stack to store elements
    this.minStack = [];       // Auxiliary stack to store minimums
  }

  push(val) {
    this.stack.push(val);

    // Update the minimum stack
    if (this.minStack.length === 0 || val <= this.getMin()) {
      this.minStack.push(val);
    }
  }

  pop() {
    if (this.stack.length === 0) {
      return null; // Stack is empty
    }

    const popped = this.stack.pop();

    // Update the minimum stack if the popped element was the minimum
    if (popped === this.getMin()) {
      this.minStack.pop();
    }

    return popped;
  }

  getMin() {
    if (this.minStack.length === 0) {
      return null; // Stack is empty
    }

    return this.minStack[this.minStack.length - 1];
  }
}

// Example usage:
const stack = new MinStack();
stack.push(3);
stack.push(5);
stack.push(2);
stack.push(1);

console.log("Minimum Element:", stack.getMin()); // Should print 1

stack.pop();
console.log("Minimum Element:", stack.getMin()); // Should print 2

